{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","DEFAULT","sortField","setSortField","IsReversed","setIsReversed","sortedGoods","goods","reverse","preparedGoods","SORT_FIELD_ALPH","sort","good1","good2","localeCompare","SORT_FIELD_LENTGTH","length","getPreparedGoods","resetReverse","className","type","cn","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,uBAAAA,E,4BAAAA,E,YAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAoBH,EAAUI,SAAhE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAhCR,SACEC,EACAL,EACAM,GAEA,IAAIC,EAAa,YAAOF,GAExB,GAAIL,EACF,OAAQA,GACN,KAAKL,EAAUa,gBACbD,EAAcE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACzD,MAEF,KAAKhB,EAAUkB,mBACbN,EAAcE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,UAC1D,MAEF,QACEP,EAAa,YAAOA,GAI1B,OAAID,EACKC,EAAcD,UAGhBC,EAMaQ,CAClBnB,EACAI,EACAE,GAEIc,EAAed,GAAcF,IAAcL,EAAUI,QAO3D,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYnB,IAAcL,EAAUa,kBAExCY,QAAS,kBAAMnB,EAAaN,EAAUa,kBAPxC,iCAYA,wBACEU,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYnB,IAAcL,EAAUkB,qBAExCO,QAAS,kBAAMnB,EAAaN,EAAUkB,qBAPxC,4BAYA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAajB,IAEjBkB,QAAS,WACPjB,GAAc,SAAAkB,GAAO,OAAKA,MAR9B,qBAcCL,GAEG,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,WAlDnBnB,EAAaN,EAAUI,SACvBI,GAAc,IA8CN,sBAYN,6BACGC,EAAYkB,KAAI,SAAAC,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC1HlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e629dede.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  SORT_FIELD_ALPH = 'alph',\n  SORT_FIELD_LENTGTH = 'length',\n  DEFAULT = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortField,\n  reverse: boolean,\n) {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    switch (sortField) {\n      case SortField.SORT_FIELD_ALPH:\n        preparedGoods.sort((good1, good2) => good1.localeCompare(good2));\n        break;\n\n      case SortField.SORT_FIELD_LENTGTH:\n        preparedGoods.sort((good1, good2) => good1.length - good2.length);\n        break;\n\n      default:\n        preparedGoods = [...preparedGoods];\n    }\n  }\n\n  if (reverse) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortField>(SortField.DEFAULT);\n  const [IsReversed, setIsReversed] = useState(false);\n  const sortedGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    IsReversed,\n  );\n  const resetReverse = IsReversed || sortField !== SortField.DEFAULT;\n\n  function handleReset() {\n    setSortField(SortField.DEFAULT);\n    setIsReversed(false);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortField !== SortField.SORT_FIELD_ALPH },\n          )}\n          onClick={() => setSortField(SortField.SORT_FIELD_ALPH)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortField !== SortField.SORT_FIELD_LENTGTH },\n          )}\n          onClick={() => setSortField(SortField.SORT_FIELD_LENTGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': !IsReversed },\n          )}\n          onClick={() => {\n            setIsReversed(current => !current);\n          }}\n        >\n          Reverse\n        </button>\n\n        {resetReverse\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                handleReset();\n              }}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}